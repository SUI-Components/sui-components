$base-class-input: '#{$base-class}-input';
$class-read-only: '#{$base-class-input}--readOnly';

#{$base-class-input} {
  appearance: none;
  -moz-appearance: none;
  -webkit-appearance: none;

  @include sui-atom-input-input;
  border-radius: $bdrs-atom-input;
  min-height: auto;
  text-overflow: $tov-atom-input-placeholder;
  &--charsSize {
    width: inherit;
  }

  &--hidden {
    display: none;
  }

  &--readOnly {
    background: $bgc-atom-input-read-only;
    border: $bd-atom-input-read-only;
    color: $c-atom-input-read-only;
  }

  @include atom-input-shape-wrapper(
    $base-class,
    $base-class-input,
    $bdrs-atom-input-shapes,
    $sizes-atom-input,
    $bdrs-atom-input,
    $h-atom-input--m
  );

  &#{$base-class-input}--noBorder,
  &#{$base-class-input}--noBorder:disabled {
    border: 0;
    &:focus {
      border: 0;
      box-shadow: none;
      outline: 0;
    }
  }

  &::placeholder {
    color: $c-atom-input-placeholder;
  }

  &:disabled {
    pointer-events: none;

    &:not(#{$class-read-only}) {
      -webkit-text-fill-color: $c-atom-input-disabled;

      background: $bgc-atom-input-disabled;
      border: $bd-atom-input-disabled;
      color: $c-atom-input-disabled;
    }
  }

  &:focus {
    @include sui-atom-input-input-focus;
  }

  @each $type, $attr in $sizes-atom-input {
    &-size-#{$type} {
      height: $attr;
      min-height: $attr;
    }
  }

  @each $state, $color in $states-atom-input {
    &.sui-AtomInput-input--#{$state} {
      border-color: $color;

      &:focus {
        box-shadow: $bxsh-atom-input-size $color;
      }
    }
  }

  &[type='number'] {
    -moz-appearance: textfield;

    &::-webkit-outer-spin-button,
    &::-webkit-inner-spin-button {
      appearance: none;
      margin: 0;
    }
  }
}
