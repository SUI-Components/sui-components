import {kebabCase} from 'change-case'

import {type SemanticShape, type ThemePrimitive} from './types'

const anidate = (accumulator: Map<string, string>, [key, value]) => {
  if (typeof value === 'string' || typeof value === 'number') {
    accumulator.set(`--${kebabCase(key)}`, value)
  } else if (Array.isArray(value)) {
    value.forEach((arrayValue, arrayIndex) => {
      anidate(accumulator, [`${kebabCase(key)}-${arrayIndex}`, arrayValue])
    })
  } else if (typeof value === 'object') {
    Object.entries(value).forEach(([objectKey, objectValue]: [string, string]) => {
      anidate(accumulator, [`${kebabCase(key)}-${kebabCase(objectKey)}`, objectValue])
    })
  } else if (Array.isArray(value)) {
    value.forEach((arrayValue, arrayIndex) => {
      anidate(accumulator, [`${kebabCase(key)}-${arrayIndex}`, arrayValue])
    })
  }
  return accumulator
}

export const generate = ({primitive, semantic}: {primitive: ThemePrimitive; semantic: SemanticShape}) => {
  const primitivesMap = new Map()
  let primitives = ''

  Object.entries(primitive).forEach(([key, value]) => {
    anidate(primitivesMap, [key, value])
  })

  primitivesMap.forEach((value: string, key: string) => {
    primitives += `
    ${key}: ${value};`
  })

  const semanticsMap = new Map()
  let semantics = ''

  Object.entries(semantic).forEach(([key, value]) => {
    anidate(semanticsMap, [key, value])
  })

  semanticsMap.forEach((value: string, key: string) => {
    semantics += `
    ${key}: ${value};`
  })

  const template = `// This file is auto-generated by sui-tokens
@layer tokens {
  @layer primitives {${primitives}
  }
  
  @layer semantics {${semantics}
  }
}
  `
  return template
}
