import {kebabCase} from 'change-case'

import {type SemanticShape, type ThemePrimitive} from './types'

const anidate = (accumulator: Map<string, string>, [key, value]) => {
  if (typeof value === 'string' || typeof value === 'number') {
    accumulator.set(`${kebabCase(key)}`, value)
  } else if (Array.isArray(value)) {
    value.forEach((arrayValue, arrayIndex) => {
      anidate(accumulator, [`${kebabCase(key)}-${arrayIndex}`, arrayValue])
    })
  } else if (typeof value === 'object') {
    Object.entries(value).forEach(([objectKey, objectValue]: [string, string]) => {
      anidate(accumulator, [`${kebabCase(key)}-${kebabCase(objectKey)}`, objectValue])
    })
  } else if (Array.isArray(value)) {
    value.forEach((arrayValue, arrayIndex) => {
      anidate(accumulator, [`${kebabCase(key)}-${arrayIndex}`, arrayValue])
    })
  }
  return accumulator
}

export const generate = ({primitive, semantic}: {primitive: ThemePrimitive; semantic: SemanticShape}) => {
  // const primitivesMap = new Map()
  // let primitives = ''
  //
  // Object.entries(primitive).forEach(([key, value]) => {
  //   anidate(primitivesMap, [key, value])
  // })
  //
  // primitivesMap.forEach((value: string, key: string) => {
  //   primitives += `
  //   ${key}: ${value};`
  // })

  const semanticMaps = {
    color: new Map(),
    font: new Map(),
    opacity: new Map(),
    elevation: new Map(),
    spacing: new Map()
  }
  const semanticTokens = {
    color: '',
    font: '',
    opacity: '',
    elevation: '',
    spacing: ''
  }

  const add = (keyword: string, prefix?: string) => {
    Object.entries(semantic[keyword]).forEach(([key, value]) => {
      anidate(semanticMaps[keyword], [`${keyword}-${key}`, value])
    })

    semanticTokens[keyword] = ''.concat(
      ...Array.from(semanticMaps[keyword]).map(
        ([key, value]: [string, string]) => `
      --${prefix === undefined ? '' : `${prefix}-`}${key}: ${value};`
      )
    )
  }

  const {prefix} = primitive

  add('color', prefix)
  add('font', prefix)
  add('opacity', prefix)
  add('elevation', prefix)
  add('spacing', prefix)

  return `// This file is auto-generated by sui-tokens
@layer tokens {
  @layer semantic {
    @layer color {${semanticTokens.color}
    }
    
    @layer font {${semanticTokens.font}
    }
    
    @layer opacity {${semanticTokens.opacity}
    }
    
    @layer elevation {${semanticTokens.elevation}
    }
    
    @layer spacing {${semanticTokens.spacing}
    }
  }
}
`
}
